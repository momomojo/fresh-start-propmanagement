# Authentication with Other Providers Implementation Plan

## Current Status
- Basic Firebase setup exists
- Email/password authentication implemented
- Redux store configured for auth state
- Protected routes implemented
- Basic error handling in place

## Implementation Plan

### 1. Social Authentication Service Enhancement

#### A. Update socialAuthService.ts
```typescript
// src/lib/services/socialAuthService.ts
import { 
  GoogleAuthProvider, 
  signInWithPopup,
  linkWithPopup
} from 'firebase/auth';
import { doc, getDoc, setDoc, updateDoc } from 'firebase/firestore';
import { auth, db } from '@/lib/firebase/config';
import { handleFirebaseError } from './errorHandling';
import { retryOperation } from './networkUtils';
import { securityService } from './securityService';
import { getClientIp } from './networkUtils';

export const socialAuthService = {
  async signInWithGoogle() {
    try {
      const provider = new GoogleAuthProvider();
      // Add scopes for additional Google account info
      provider.addScope('profile');
      provider.addScope('email');
      
      const result = await signInWithPopup(auth, provider);
      const credential = GoogleAuthProvider.credentialFromResult(result);
      const token = credential?.accessToken;
      
      const userDoc = await retryOperation(() => 
        getDoc(doc(db, 'users', result.user.uid))
      );
      
      // Track login for security monitoring
      await securityService.trackLoginAttempt(true, await getClientIp(), {
        timestamp: new Date().toISOString(),
        deviceInfo: {
          browser: navigator.userAgent,
          os: navigator.platform
        },
        provider: 'google'
      });
      
      if (!userDoc.exists()) {
        const userData = {
          email: result.user.email,
          name: result.user.displayName,
          role: 'tenant',
          emailVerified: result.user.emailVerified,
          provider: 'google',
          google_id: result.user.providerData[0]?.uid,
          google_access_token: token,
          avatar_url: result.user.photoURL,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        };
        await retryOperation(() =>
          setDoc(doc(db, 'users', result.user.uid), userData)
        );
        return { user: { id: result.user.uid, ...userData }, token };
      } else {
        // Update existing user with latest Google info
        const updates = {
          google_access_token: token,
          avatar_url: result.user.photoURL,
          updated_at: new Date().toISOString()
        };
        
        await retryOperation(() =>
          updateDoc(doc(db, 'users', result.user.uid), updates)
        );
        
        return {
          user: {
            id: result.user.uid,
            ...userDoc.data(),
            ...updates
          },
          token
        };
      }
    } catch (error) {
      console.error('Google sign in error:', error);
      // Track failed login attempt
      await securityService.trackLoginAttempt(false, await getClientIp(), {
        timestamp: new Date().toISOString(),
        deviceInfo: {
          browser: navigator.userAgent,
          os: navigator.platform
        },
        provider: 'google'
      });
      throw handleFirebaseError(error);
    }
  },

  async linkGoogleAccount() {
    try {
      const user = auth.currentUser;
      if (!user) throw new Error('No authenticated user');

      const provider = new GoogleAuthProvider();
      provider.addScope('profile');
      provider.addScope('email');
      
      const result = await linkWithPopup(user, provider);
      const credential = GoogleAuthProvider.credentialFromResult(result);
      const token = credential?.accessToken;

      await updateDoc(doc(db, 'users', user.uid), {
        google_id: result.user.providerData[0]?.uid,
        google_access_token: token,
        avatar_url: result.user.photoURL,
        updated_at: new Date().toISOString()
      });

      return true;
    } catch (error) {
      throw handleFirebaseError(error);
    }
  }
};
```

### 2. Update Login Component
- Add Google sign-in button with proper styling
- Handle loading states during authentication
- Implement proper error handling
- Add success feedback
- Add proper TypeScript types

### 3. Error Handling Enhancement
- Create specific error messages for social auth failures
- Implement retry logic for network issues
- Add proper error tracking
- Update error display in UI

### 4. Security Considerations
- Implement proper token storage
- Add session management
- Track login attempts
- Monitor for suspicious activities
- Implement rate limiting

### 5. Testing Plan
1. Unit Tests:
   - Test social authentication service
   - Test error handling
   - Test state management
   - Test component rendering

2. Integration Tests:
   - Test auth flow
   - Test error scenarios
   - Test state updates
   - Test protected routes

3. E2E Tests:
   - Complete login flow
   - Error scenarios
   - Session management
   - Role-based access

### 6. Documentation
1. Update API documentation
2. Add usage examples
3. Document error codes
4. Add troubleshooting guide
5. Update security documentation

## Implementation Steps

### Phase 1: Core Implementation
1. Update socialAuthService.ts
2. Enhance error handling
3. Update Login component
4. Add loading states
5. Implement basic tests

### Phase 2: Security Enhancement
1. Add session management
2. Implement tracking
3. Add rate limiting
4. Enhance error monitoring

### Phase 3: Testing & Documentation
1. Write comprehensive tests
2. Update documentation
3. Add usage examples
4. Create troubleshooting guide

### Phase 4: Polish & Optimization
1. Optimize performance
2. Enhance UI/UX
3. Add analytics
4. Implement feedback collection

## Success Criteria
1. Successful Google sign-in
2. Proper error handling
3. Secure token management
4. Comprehensive test coverage
5. Clear documentation
6. Smooth user experience

## Future Enhancements
1. Add more providers (GitHub, Microsoft, etc.)
2. Enhance session management
3. Add 2FA support
4. Implement account linking
5. Add social profile sync