# Component Strategy

This document outlines the strategy for managing components in this project, including existing components and the integration of Shadcn UI components.

## Existing Components

The project currently has components located in the following directories:

- `src/components/auth`: Authentication-related components (e.g., `ProtectedRoute`).
- `src/components/layout`: Layout components (e.g., `Layout`, `Navbar`, `Sidebar`).
- `src/components/properties`: Components related to property management (e.g., `AddPropertyModal`, `UnitList`).
- `src/components/settings`: Components for settings pages (e.g., `AdminSettings`, `UserProfile`).
- `src/components/tenants`: Components related to tenant management (e.g., `AddTenantModal`, `TenantDetailsModal`).
- `src/components/ui`: Reusable UI components (e.g., `Card`, `LoadingSpinner`, `Table`).
- `src/components/ui/Form`: Form-related components (e.g., `FormField`, `Input`, `Select`).
- `src/components/ui/Table`: Table-related components (e.g., `Table`, `TablePagination`).

These components should be refactored to ensure they are reusable and generic.

## Shadcn UI Integration

Shadcn UI components will be integrated into the project as needed. These components will be used for common UI elements that are not already covered by the existing components or when a more robust and accessible component is required.

### Component Placement

- **Existing Components:** Refactor existing components into `src/components/ui` directory.
- **Shadcn UI Components:** Place Shadcn UI components in the `src/components/ui` directory as well.

### Reusability

To ensure components are reusable:

- **Generic Design:** Components should be designed to be as generic as possible, accepting props to customize their behavior and appearance.
- **Clear Prop Types:** Use TypeScript to define clear prop types for each component.
- **Consistent Styling:** Use Tailwind CSS classes consistently across all components.
- **Documentation:** Document each component's purpose, props, and usage.

### Considerations

- **Accessibility:** Ensure all components are accessible by following ARIA guidelines.
- **Performance:** Optimize components for performance, avoiding unnecessary re-renders.
- **Testing:** Write unit tests for each component to ensure they function correctly.
- **Naming Conventions:** Use clear and consistent naming conventions for all components and their props.
- **Component Composition:** Favor component composition over inheritance to create more flexible and reusable components.
- **Storybook:** Consider using Storybook to develop and showcase components in isolation.

By following these guidelines, we can create a robust and maintainable component library for this project.
