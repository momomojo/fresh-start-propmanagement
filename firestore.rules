rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isValidTimestamp(timeVal) {
      return timeVal is timestamp && 
             timeVal.toMillis() <= request.time.toMillis() &&
             request.time.toMillis() - timeVal.toMillis() < 300000;
    }
    
    function hasRequiredTimestamps(data) {
      return data.keys().hasAll(['created_at', 'updated_at']) &&
             isValidTimestamp(data.created_at) &&
             isValidTimestamp(data.updated_at);
    }

    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isPropertyManager() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'property_manager';
    }
    
    function isTenant() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'tenant';
    }
    
    // Users collection
    match /users/{userId} {
      // Anyone can read basic user info, but sensitive fields are protected
      allow read: if isAuthenticated();
      
      // Allow creation during signup
      allow create: if isAuthenticated() && 
                    request.auth.uid == userId &&
                    request.resource.data.keys().hasAll(['email', 'name', 'role']) &&
                    request.resource.data.role == 'tenant' &&
                    hasRequiredTimestamps(request.resource.data);
      
      // Users can update their own profiles, admins can update any profile
      allow update: if isAuthenticated() &&
                    (request.auth.uid == userId || isAdmin()) &&
                    request.resource.data.updated_at is timestamp;
      
      // Only admins can delete users
      allow delete: if isAdmin();
    }

    // Properties collection
    match /properties/{propertyId} {
      allow read: if isAuthenticated();
      
      // Only admins and property managers can create properties
      allow create: if isAdmin() || 
        (isPropertyManager() && 
         request.resource.data.manager_id == request.auth.uid);
      
      // Allow updates by admins and assigned property managers
      allow update: if isAdmin() ||
        (isPropertyManager() && (
          resource.data.manager_id == request.auth.uid ||
          request.resource.data.manager_id == request.auth.uid
        ));
      
      // Only admins can delete properties
      allow delete: if isAdmin();
    }
    
    // Units collection
    match /units/{unitId} {
      allow read: if isAuthenticated();
      
      allow create: if isAdmin() || isPropertyManager();
      
      allow update: if isAdmin() || 
        (isPropertyManager() && 
         exists(/databases/$(database)/documents/properties/$(resource.data.property_id)));
      
      allow delete: if isAdmin();
    }
    
    // Tenants collection
    match /tenants/{tenantId} {
      allow read: if isAuthenticated() &&
                   (isAdmin() || isPropertyManager() || request.auth.uid == tenantId);
      
      allow create: if isAdmin() || isPropertyManager();
      
      allow update: if isAdmin() || 
        (isPropertyManager() && resource.data.property_id != null) ||
        request.auth.uid == tenantId;
      
      allow delete: if isAdmin();
    }
    
    // Leases collection
    match /leases/{leaseId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() || isPropertyManager();
      allow update: if isAdmin() || isPropertyManager();
      allow delete: if isAdmin();
    }
    
    // Maintenance collection
    match /maintenance/{requestId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['title', 'description', 'priority', 'status']) &&
        request.resource.data.priority in ['low', 'medium', 'high', 'emergency'] &&
        request.resource.data.status in ['pending', 'in_progress', 'completed'] &&
        hasRequiredTimestamps(request.resource.data);
      
      allow update: if isAdmin() || isPropertyManager() || 
        (isTenant() && 
         resource.data.tenant_id == request.auth.uid &&
         request.resource.data.updated_at is timestamp &&
         isValidTimestamp(request.resource.data.updated_at));
      
      allow delete: if isAdmin();
    }
    
    // Payments collection
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && 
        (isAdmin() || isPropertyManager() || 
         resource.data.tenant_id == request.auth.uid);
      
      allow create: if isAuthenticated() &&
        request.resource.data.keys().hasAll(['amount', 'type', 'status']) &&
        request.resource.data.type in ['rent', 'deposit', 'fee'] &&
        request.resource.data.status in ['pending', 'completed', 'failed'] &&
        request.resource.data.amount > 0 &&
        hasRequiredTimestamps(request.resource.data);
      
      allow update: if isAdmin() || isPropertyManager();
      allow delete: if isAdmin();
    }
    
    // Documents collection
    match /documents/{documentId} {
      allow read: if isAuthenticated() && 
        (isAdmin() || isPropertyManager() || 
         resource.data.tenant_id == request.auth.uid);
      
      allow create: if isAdmin() || isPropertyManager();
      allow update: if isAdmin() || isPropertyManager();
      allow delete: if isAdmin();
    }
  }
}